name: Deploy to cPanel/Hostinger

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: "deploy-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile --production=false

      - name: Lint code
        run: yarn lint
        continue-on-error: false

      - name: Run tests (if available)
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            yarn test --passWithNoTests --watchAll=false
          else
            echo "No tests found, skipping..."
          fi
        continue-on-error: false

      - name: Build with Vite
        run: yarn build
        env:
          NODE_ENV: production
          CI: true

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found!"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Error: index.html not found in dist!"
            exit 1
          fi
          echo "Build verification successful"
          ls -la dist/

      - name: Setup SSH Key and Fix Format (With Passphrase Support)
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Check and fix key format with passphrase support
          if head -1 ~/.ssh/deploy_key | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            echo "Converting OpenSSH format to RSA format..."
            # If key has passphrase, use it; if not, use empty passphrase
            if [ -n "${{ secrets.SSH_PASSPHRASE }}" ]; then
              echo "Using provided passphrase for key conversion"
              ssh-keygen -p -m PEM -f ~/.ssh/deploy_key -N "" -P "${{ secrets.SSH_PASSPHRASE }}"
            else
              echo "Attempting conversion without passphrase (key might not be encrypted)"
              ssh-keygen -p -m PEM -f ~/.ssh/deploy_key -N "" -P "" || {
                echo "Key appears to be encrypted but no passphrase provided"
                echo "Please add SSH_PASSPHRASE secret or use an unencrypted key"
                exit 1
              }
            fi
            echo "Key converted successfully"
          elif head -1 ~/.ssh/deploy_key | grep -q "BEGIN RSA PRIVATE KEY"; then
            echo "RSA format detected - key is ready"
          else
            echo "Unknown key format detected:"
            head -1 ~/.ssh/deploy_key
          fi

          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Deploy to cPanel via SFTP
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          server: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          local_path: "./dist/*"
          remote_path: ${{ secrets.REMOTE_PATH }}
          sftpArgs: "-o ConnectTimeout=10 -o StrictHostKeyChecking=no"

      - name: Cleanup SSH Key
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          echo "SSH key cleaned up"

      - name: Health check (optional)
        run: |
          echo "Deployment completed successfully!"
